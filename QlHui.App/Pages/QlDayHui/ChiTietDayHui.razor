@page "/ChiTietDayHui/{dayHuiId:int}"
@using QlHui.App.Data.Models.Config
@using QlHui.App.Data.Services
@using Razor.Templating.Core
@using SelectPdf
@using System.Reflection
@using CommunityToolkit.Maui.Storage;
@using System.Globalization

@inject IQlHuiService qlHuiService;
@inject IQlHuiVienService qlHuiVienService;
@inject ILsBoHuiService lsBoHuiService;
@inject ILsDongHuiService lsDongHuiService;
@implements IDisposable;
@inject IJSRuntime JSRuntime;
@inject DialogService dialogService;
@inherits NotificationBase;
@inject NavigationManager navManager;
@using static QlHui.App.Data.Constant.Const;
<RadzenProgressBar Value="100" ShowValue="false" Visible="@isShowProgressBar" Mode="ProgressBarMode.Indeterminate" />
<RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="arrow_back_ios" Variant="Variant.Text"
              Text="Trở lại" Click=@(args=> navManager.NavigateTo("/TimKiemDayHui")) />
<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
    <RadzenButton Text="Thêm HV mới" ButtonStyle="ButtonStyle.Primary" Click=@ThemHuiVienMoi Disabled=@(isDisabledButton || daCoNguoiBoHui) Icon="add" />
    <RadzenButton Text="Thêm HV đã tồn tại" ButtonStyle="ButtonStyle.Primary" Click=@ThemHuiVienDaTonTai Disabled=@(isDisabledButton || daCoNguoiBoHui) Icon="person_add" Shade="Shade.Dark"/>
</RadzenStack>
<RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H6" class="rz-p-2 rz-color-primary" Style="font-weight:bold;">Thông tin dây hụi</RadzenText>
<RadzenStack >
    <RadzenCard>
        <RadzenRow >
            <RadzenColumn Size="5">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText>Mã dây hụi: </RadzenText>
                    <RadzenText Style="font-weight: bold;">@dayHuiHienTai.MaDayHui</RadzenText>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="3">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText>Ngày khui: </RadzenText>
                    <RadzenText Style="font-weight: bold;">@ngayKhui</RadzenText>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText>Tiền 1 C: </RadzenText>
                    <RadzenText Style="font-weight: bold;">@dayHuiHienTai.TienMotChan.GetMoneyFormat() </RadzenText>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText>Số phần: </RadzenText>
                    <RadzenText Style="font-weight: bold;">@tongSoPhan</RadzenText>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText>Kỳ: </RadzenText>
                    <RadzenText Style="font-weight: bold;">@dayHuiHienTai.KyBo </RadzenText>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="3">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText>Tiền thảo: </RadzenText>
                    <RadzenText Style="font-weight: bold;">@dayHuiHienTai.TienThao.GetMoneyFormat()  </RadzenText>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</RadzenStack>
@*<div class="row position-relative pt-2">
    <div class="d-grid gap-3 d-md-flex justify-content-md-end">
        <RadzenButton Text="Bỏ hụi lại" Icon="settings_backup_restore" />
    </div>
</div>*@
<RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H6" class="rz-p-2 rz-color-primary" Style="font-weight:bold;">Danh sách hụi viên tham gia</RadzenText>
<RadzenDataGrid @ref="thamGiaDayHuiGrid" TItem="HuiVienThamGiaDto" Data=@danhSachHuiVienThamGia Style="max-height:400px" RowUpdate="@CapNhatDuLieuDong"
                AllowSorting="true" IsLoading=@isSearchLoadingShow
                PagerHorizontalAlign="HorizontalAlign.Center" AllowAlternatingRows="false" EditMode="DataGridEditMode.Single">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 18px; text-align: center; margin: 2rem;">@Const.EmptyTable</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Title="#" TextAlign="TextAlign.Center" Width="80px">
            <Template>
                @(danhSachHuiVienThamGia.IndexOf(context) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Title="Thao tác" TextAlign="TextAlign.Center" Width="250px" MinWidth="100px" Frozen="true">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Bỏ hụi" Icon="payments"
                              Variant="Variant.Outlined"Shade="Shade.Light"  Click=@(arg=>BoHui(data))
                              Visible=@(data.DaBoHui!=true && coTheBoHui) Size="ButtonSize.Small"/>

                <RadzenButton ButtonStyle="ButtonStyle.Dark" Text="Giao tiền"
                              Variant="Variant.Outlined" Shade="Shade.Light"
                              Click="@(args=>TraTien(data))" Icon="paid" Size="ButtonSize.Small"
                              Visible=@(data.TrangThai==(int)TrangThaiDongHui.CHUA_TRA && data.PhaiTra.GetValueOrDefault()>0)/>

                <RadzenButton ButtonStyle="ButtonStyle.Warning" Text="Thu tiền"
                              Variant="Variant.Outlined" Shade="Shade.Light"
                              Click="@(args=>ThuTien(data))" Icon="price_check" Size="ButtonSize.Small"
                              Visible=@(data.TrangThai==(int)TrangThaiDongHui.CHUA_THU && data.TongPhaiThu.GetValueOrDefault()>0) />

                <RadzenSplitButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Primary"
                                   Shade="Shade.Light" Text="Sửa" Size="ButtonSize.Small" Icon="edit"
                                   Click="@(args => ThaoTac(args,data))" @onclick:stopPropagation="true">
                    <ChildContent>
                        <RadzenSplitButtonItem Text="Xoá" Value="1" Icon="delete" Visible=@(daCoNguoiBoHui!=true) />
                        <RadzenSplitButtonItem Text="Đổi người" Value="2" Icon="change_circle" />
                        <RadzenSplitButtonItem Text="Xuất phiếu giao" Value="3" Icon="export_notes" Visible=@(data.TrangThai==(int)TrangThaiDongHui.CHUA_TRA && data.PhaiTra.GetValueOrDefault()>0) />
                        <RadzenSplitButtonItem Text="Xem lịch sử đóng hụi" Value="4" Icon="history" />
                    </ChildContent>
                </RadzenSplitButton>
                @* <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Text" Shade="Shade.Light"
                              Icon="edit" title="Chỉnh sửa" Click="@(args => ChinhSuaDong(data))" @onclick:stopPropagation="true" />

                <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Text" Shade="Shade.Light" Visible=@(daCoNguoiBoHui!=true)
                              Icon="delete" title="Xóa" Click=@(arg=>XoaHuiVienThamGia(data)) @onclick:stopPropagation="true" />

                <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Light"
                              Icon="history" title="Xem lịch sử đóng" Click="@(args => HienThiChiTietLichSuDongHui(data))" />

                <RadzenButton ButtonStyle="ButtonStyle.Warning" Variant="Variant.Text" Shade="Shade.Light"
                              Icon="change_circle" title="Đổi người" Click="@(args => DoiNguoiThamGia(data))" Visible=@(data.SoCChet==0) />

                <RadzenButton ButtonStyle="ButtonStyle.Warning" Variant="Variant.Text" Shade="Shade.Light"
                              Icon="export_notes" title="Xuất đơn giao" Click="@(args => XuatPhieuGiao(data))" /> *@
            </Template>
            <EditTemplate Context="data">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" 
                              Size="ButtonSize.Small"
                              Variant="Variant.Flat" 
                              Click="@((args) => LuuChinhSuaDong(data))" Text="Lưu">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Base" 
                              Variant="Variant.Flat" Size="ButtonSize.Small"
                              Click="@((args) => BoChinhSuaDong(data))" Text="Bỏ">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="MaHuiVien" Frozen="true" Width="100px" Title="Mã HV">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="TenHuiVien" Title="Tên HV" Frozen="true" Width="200px" />
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Width="150px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <span>Sống/Chết</span>
            </HeaderTemplate>
            <Template Context="data">
                <span>@(data.SoCSong > 0 ? "S" : "C")</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="TongDaDong" Type=typeof(float?) Width="200px" TextAlign="TextAlign.Right">
            <HeaderTemplate>
                <span>Tổng</span><br />
                <span>đã đóng</span>
            </HeaderTemplate>
            <Template Context="data">
                <span>@(data.TongDaDong.GetMoneyFormat())</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Type=typeof(float?) FormatString=@NumericFormat.MoneyFormat Width="200px" TextAlign="TextAlign.Right">
            <HeaderTemplate>
                <span>Tổng</span><br />
                <span>phải thu</span>
            </HeaderTemplate>
            <Template Context="data">
                <span>@(data.TongPhaiThu.GetMoneyFormat(false))</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="KyHienTaiPhaiThu" Type=typeof(float?) Width="200px" TextAlign="TextAlign.Right">
            <HeaderTemplate>
                <span>Kỳ hiện tại</span><br />
                <span>phải thu</span>
            </HeaderTemplate>
            <Template Context="data">
                <span>@data.KyHienTaiPhaiThu.GetMoneyFormat()</span>
            </Template>
            <EditTemplate Context="data">
                <RadzenNumeric TValue="string" @oninput="@(arg=>data.KyHienTaiPhaiThu = arg.Value.ToString().GetFloatNumber())"
                               Value="@data.KyHienTaiPhaiThu.GetMoneyFormat()" Style=" width:100%;" TextAlign="TextAlign.Right"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="PhaiTra" Title="Tiền hốt" Type=typeof(float?) Width="200px" TextAlign="TextAlign.Right">
            <Template Context="data">
                <span>@(data.PhaiTra.GetMoneyFormat())</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="TienLoi" Title="Lời/Lỗ" Type=typeof(float?) FormatString=@NumericFormat.MoneyFormat Width="200px" TextAlign="TextAlign.Right">
            <Template Context="data">
                <span>@(data.TienLoi.GetMoneyFormat())</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="TrangThai" Title="Trạng thái" Width="150px">
            <Template Context="data">
                <RadzenLabel Visible=@(data.TrangThai==(int)TrangThaiDongHui.CHUA_THU) class="rz-color-danger">Chưa thu</RadzenLabel>
                <RadzenLabel Visible=@(data.TrangThai==(int)TrangThaiDongHui.DA_THU) class="rz-color-success">Đã thu</RadzenLabel>
                <RadzenLabel Visible=@(data.TrangThai==(int)TrangThaiDongHui.CHUA_TRA) class="rz-color-warning">Chưa trả</RadzenLabel>
                <RadzenLabel Visible=@(data.TrangThai==(int)TrangThaiDongHui.DA_TRA) class="rz-color-success">Đã trả</RadzenLabel>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HuiVienThamGiaDto" Property="GhiChu" Title="Ghi chú" Width="500px">
            <EditTemplate Context="data">
                <RadzenTextArea @bind-Value=@data.GhiChu Style="width:100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
<RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H6" class="rz-p-2 rz-color-primary" Style="font-weight:bold;">Lịch sử bỏ hụi</RadzenText>
<RadzenDataGrid TItem="LichSuBoHuiDto" Data=@danhSachLichSuBoHui Style="max-height:400px"
                AllowSorting="true" IsLoading=@isSearchLoadingShow PagerHorizontalAlign="HorizontalAlign.Center" AllowAlternatingRows="false">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 18px; text-align: center; margin: 2rem;">@Const.EmptyTable</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="LichSuBoHuiDto" Property="KyBo" Title="Kỳ bỏ" TextAlign="TextAlign.Center" Width="80px" />
        <RadzenDataGridColumn TItem="LichSuBoHuiDto" Property="NgayBoHui" Title="Ngày bỏ hụi" Type=typeof(DateTime?) FormatString={0:dd/MM/yyyy} TextAlign="TextAlign.Right" />
        <RadzenDataGridColumn TItem="LichSuBoHuiDto" Property="NguoiBo" Title="Người bỏ" />
        <RadzenDataGridColumn TItem="LichSuBoHuiDto" Property="SoTien" Title="Tiền bỏ" Type=typeof(float?) TextAlign="TextAlign.Center" FormatString="{0:0,0}" />
        <RadzenDataGridColumn TItem="LichSuBoHuiDto" Property="TongHot" Title="Tổng hốt" Type=typeof(float?) FormatString={0:0,0} TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="LichSuBoHuiDto" Property="ChiTiet" Title="Chi tiết" Width="500px">
            <Template Context="data">
                @foreach (var item in data.ChiTiet.Split("\n"))
                {
                    <span>@item</span>
                    <br />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@code {
    [Parameter]
    public int dayHuiId { get; set; }
    public bool isVisibleBoHuiLaiButton { get; set; }
    public bool isShowProgressBar { get; set; } = false;

    PagerPosition pagerPosition = PagerPosition.Bottom;
    QLDayHuiSearchCriteria searchCriteria = new();
    AlertOption alertOption = new();
    DateTime currentDate = DateTime.Now;
    DayHuiDto dayHuiHienTai;
    RadzenDataGrid<HuiVienThamGiaDto> thamGiaDayHuiGrid;
    IList<HuiVienThamGiaDto> danhSachHuiVienThamGia = new List<HuiVienThamGiaDto>();
    IList<LichSuBoHuiDto> danhSachLichSuBoHui = new List<LichSuBoHuiDto>();

    HuiVienThamGiaDto huiVienUpdateOld;

    string ngayKhui = string.Empty;
    string tongSoPhan = string.Empty;
    string tienBo = string.Empty;
    string tienMotChan = string.Empty;

    bool isSearchLoadingShow = false;
    bool isDisabledButton = false;
    bool daCoNguoiBoHui = false;
    bool coTheBoHui = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        dialogService.OnOpen += OnOpenDialog;
        dialogService.OnClose += OnCloseDialog;
        LoadData();
    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    //if (firstRender)
    //    //{
    //    //    await JSRuntime.InvokeVoidAsync("addHoverStyles", thamGiaDayHuiGrid);
    //    //}
    //}
    void OnOpenDialog(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    void OnCloseDialog(dynamic result)
    {
        if (result == true)
        {
            LoadData();
        }
        dialogService.Dispose();
    }

    async Task ThemHuiVienMoi()
    {
        try
        {
            await dialogService.OpenAsync<ThemHuiVienVaoDayHui>($"Thêm hụi viên mới - Dây: {dayHuiHienTai?.MaDayHui}",
            new Dictionary<string, object>()
                                                                                                                                                                            {
                        {"dayHuiId", dayHuiId},{"themHuiVienDaTonTai",false}
                                                                                                                                                                            },
            new DialogOptions() { Width = "85%", Height = "80%", Resizable = true });
        }
        catch (Exception ex)
        {
            ShowErrorNotification(ex.GetError());
        }
    }

    async Task ThemHuiVienDaTonTai()
    {
        try
        {
            await dialogService.OpenAsync<ThemHuiVienVaoDayHui>(
             $"Thêm hụi viên đã tồn tại trên hệ thống - Dây: {dayHuiHienTai?.MaDayHui}",
             new Dictionary<string, object>()
                                                                                                                                                                                    {
                                {"dayHuiId", dayHuiId},{"themHuiVienDaTonTai",true}
                                                                                                                                                                                    },
             new DialogOptions() { Width = "85%", Height = "80%", Resizable = true });
        }
        catch (Exception ex)
        {
            ShowErrorNotification(ex.GetError());
        }
    }

    async Task XoaHuiVienThamGia(HuiVienThamGiaDto dto)
    {
        try
        {
            if (dto != null)
            {
                bool dayHuiDaCoNguoiBo = qlHuiService.DayHuiDaCoNguoiBoChua(dayHuiId);
                if (dayHuiDaCoNguoiBo)
                {
                    ShowWarningNotification("Không thể xóa thành viên tham gia vì dây hụi đã có người đóng");
                    return;
                }
                else
                {
                    var xacNhanXoa = await dialogService.Confirm(
    $"Hụi viên tham gia: {dto.TenHuiVien}", $"Bạn có muốn xóa khỏi danh sách tham gia dây {dayHuiHienTai.MaDayHui}?",
    new ConfirmOptions() { OkButtonText = "Có", CancelButtonText = "Không" });

                    if (xacNhanXoa == true)
                    {
                        bool xoaThanhCong = qlHuiVienService.XoaHuiVienThamGia(dto);
                        if (xoaThanhCong)
                        {
                            ShowSuccessNotification("Xóa hụi viên tham gia thành công");
                            CapNhatDuLieu();
                        }
                        else
                        {
                            ShowErrorNotification("Có lỗi khi xóa hụi viên tham gia");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ShowErrorNotification(ex.GetError());
        }

    }

    void SetData(DayHuiDto dayHui)
    {
        if (dayHui != null)
        {
            tongSoPhan = dayHui.TongSoChan + "P";
            ngayKhui = dayHui.NgayKhui.HasValue ? dayHui.NgayKhui.Value.ToString(DateTimeFormat.UIDateFormat) : string.Empty;
            tienMotChan = dayHui.TienMotChan.HasValue ? dayHui.TienMotChan.Value.ToString(NumericFormat.MoneyFormat) : string.Empty;
        }
        else
        {
            ngayKhui = string.Empty;
            tongSoPhan = "0P";
            tienMotChan = string.Empty;
        }
    }

    void LayDanhSachHuiVienThamGiaDayHui()
    {
        var retRs = qlHuiVienService.LayDanhSachHuiVienThamGiaDayHui(dayHuiId);
        if (retRs != null && retRs.Any())
        {
            if (coTheBoHui)
            {
                danhSachHuiVienThamGia = retRs.Select(item =>
                {
                    if (item.TongPhaiThu.GetValueOrDefault() <= 0 && item.PhaiTra.GetValueOrDefault() <= 0)
                    {
                        item.TrangThai = null;
                    }
                    return item;
                }).ToList();
            }
            else
            {
                danhSachHuiVienThamGia = retRs.ToList();

            }
        }
        else
        {
            danhSachHuiVienThamGia = new List<HuiVienThamGiaDto>();
        }
    }

    void LayDanhSachLsBoHui()
    {
        danhSachLichSuBoHui = lsBoHuiService.LayDanhSachLichSuBoHui(dayHuiId).ToList();
    }
    void LoadData()
    {
        dayHuiHienTai = qlHuiService.GetById(dayHuiId);
        coTheBoHui = dayHuiHienTai.NgayBoHui.GetValueOrDefault().Date <= DateTime.Now.Date;
        if (dayHuiHienTai == null)
        {
            isDisabledButton = true;
            ShowWarningNotification("Không tìm thấy dây hụi");
        }
        else
        {
            CapNhatDuLieu();
        }
    }
    void CapNhatDuLieu()
    {
        isShowProgressBar = true;
        LayDanhSachHuiVienThamGiaDayHui();
        if (danhSachHuiVienThamGia != null && danhSachHuiVienThamGia.Count>0)
        {
            dayHuiHienTai.TongSoChan = danhSachHuiVienThamGia.Sum(item => item.SoCThamGia);
            daCoNguoiBoHui = danhSachHuiVienThamGia.Any(item => item.DaBoHui == true);
            LayDanhSachLsBoHui();
        }
        dayHuiHienTai.KyBo = TinhToanSoKyHienTai();
        _ = qlHuiService.Update(dayHuiHienTai);
        SetData(dayHuiHienTai);
        isShowProgressBar = false;
    }

    async Task ChinhSuaDong(HuiVienThamGiaDto rowItem)
    {
        huiVienUpdateOld = rowItem.DeepCopy();
        await thamGiaDayHuiGrid.EditRow(rowItem);
    }

    async Task CapNhatDuLieuDong(HuiVienThamGiaDto rowItem)
    {
        isShowProgressBar = true;
        try
        {
            if (rowItem != null)
            {
                bool updateSuccess = qlHuiVienService.CapNhatHuiVienThamGia(rowItem);
                if (updateSuccess)
                {
                    ShowSuccessNotification("Cập nhật thành công!");
                    huiVienUpdateOld = null;
                }
                else
                {
                    ShowErrorNotification("Lưu thất bại!");
                    await thamGiaDayHuiGrid.EditRow(rowItem);
                }
            }
        }
        catch (Exception ex)
        {
            ShowErrorNotification(ex.GetError());
        }
        finally
        {
            isShowProgressBar = false;
        }
    }

    async Task LuuChinhSuaDong(HuiVienThamGiaDto rowItem)
    {
        if (huiVienUpdateOld != null)
        {
            rowItem.TongPhaiThu = (rowItem.TongPhaiThu.GetValueOrDefault() - huiVienUpdateOld.KyHienTaiPhaiThu.GetValueOrDefault()) + rowItem.KyHienTaiPhaiThu.GetValueOrDefault();
        }
        await thamGiaDayHuiGrid.UpdateRow(rowItem);
    }

    void BoChinhSuaDong(HuiVienThamGiaDto rowItem)
    {

        huiVienUpdateOld = null;

        thamGiaDayHuiGrid.CancelEditRow(rowItem);

        // For production
    }

    async Task DoiNguoiThamGia(HuiVienThamGiaDto rowItem)
    {
        if (rowItem != null)
        {
            try
            {
                await dialogService.OpenAsync<DoiNguoiThamGia>($"Đổi người tham gia - Hụi viên : {rowItem.TenHuiVien}-{rowItem.MaHuiVien}",
                new Dictionary<string, object>()
                                                                                                                                                                                        {
                        {"huiVienThamGiaId", rowItem.Id}
                                                                                                                                                                                        },
                new DialogOptions() { Width = "768px", Height = "300px", Resizable = true });
            }
            catch (Exception ex)
            {
                ShowErrorNotification(ex.GetError());
            }
        }

    }

    async Task BoHui(HuiVienThamGiaDto rowItem)
    {
        if (rowItem != null)
        {
            try
            {
                await dialogService.OpenAsync<BoHui>($"Hụi viên : {rowItem.TenHuiVien}-{rowItem.MaHuiVien}",
                new Dictionary<string, object>()
                                                                                                                                                                                            {
                        {"huiVienThamGiaId", rowItem.Id}
                                                                                                                                                                                            },
                new DialogOptions() { Width = "480px", Height = "300px", Resizable = true });
            }
            catch (Exception ex)
            {
                ShowErrorNotification(ex.GetError());
            }
        }
    }

    int TinhToanSoKyHienTai()
    {
        int soKy = 0;

        if (dayHuiHienTai != null && danhSachHuiVienThamGia != null && danhSachHuiVienThamGia.Count>0)
        {
            int tongDanhSachHuiVienThamGia = danhSachHuiVienThamGia.Count;
            var currentDate = DateTime.Now;
            var ngayKhui = dayHuiHienTai.NgayKhui.Value;
            while (soKy <= tongDanhSachHuiVienThamGia &&
                   ngayKhui.Date <= dayHuiHienTai.NgayBoHui.Value.Date &&
                   ngayKhui.Date <= DateTime.Now.Date)
            {
                soKy++;
                if (dayHuiHienTai.LoaiHui.HasValue)
                {
                    if (dayHuiHienTai.LoaiHui.Value == (int)LoaiHui.NGAY)
                    {
                        ngayKhui = ngayKhui.AddDays(1 * dayHuiHienTai.SoNgayLoaiHui);
                    }
                    else if (dayHuiHienTai.LoaiHui.Value == (int)LoaiHui.TUAN)
                    {
                        ngayKhui = ngayKhui.AddDays(7 * dayHuiHienTai.SoNgayLoaiHui);
                    }
                    else
                    {
                        ngayKhui = ngayKhui.AddMonths(1 * dayHuiHienTai.SoNgayLoaiHui);
                    }
                }
            }
        }
        else
        {
            soKy = 1;
        }
        return soKy;
    }

    async Task TraTien(HuiVienThamGiaDto rowItem)
    {
        if (rowItem != null && rowItem.Id > 0)
        {
            var updateItem = rowItem.TraTien();
            var xacNhan = await dialogService.Confirm(
      $"Hụi viên: {rowItem.TenHuiVien}", $"Xác nhận TRẢ {updateItem.TienDaTra.GetMoneyFormat()}?",
      new ConfirmOptions() { OkButtonText = "Có", CancelButtonText = "Không" });
            if (xacNhan == true)
            {
                var updateRs = qlHuiVienService.CapNhatHuiVienThamGia(updateItem);
                if (updateRs)
                {
                    var lichSuDongHui = new LichSuDongHuiDto().LayLsTraTien(updateItem, dayHuiHienTai.KyBo);
                    _ = lsDongHuiService.Insert(lichSuDongHui);
                    ShowSuccessNotification("Trả tiền thành công!");
                    LayDanhSachHuiVienThamGiaDayHui();
                }
                else
                {
                    ShowErrorNotification("Có lỗi khi cập nhật!");
                }
            }
        }
    }

    async Task ThuTien(HuiVienThamGiaDto rowItem)
    {
        if (rowItem != null && rowItem.Id > 0)
        {
            try
            {
                await dialogService.OpenAsync<ThuTien>($"Thu tiền - Hụi viên : {rowItem.TenHuiVien}-{rowItem.MaHuiVien}",
                new Dictionary<string, object>()
                                                                           {
                        {"huiVienThamGiaId", rowItem.Id}
                                                                           },
                 new DialogOptions() { Width = "60%", Height = "60%", Resizable = true });
            }
            catch (Exception ex)
            {
                ShowErrorNotification(ex.GetError());
            }
        }
    }

    async Task HienThiChiTietLichSuDongHui(HuiVienThamGiaDto rowItem)
    {
        if (rowItem != null)
        {
            try
            {
                await dialogService.OpenAsync<LichSuDongHui>($"Lịch sử đóng hụi - Hụi viên : {rowItem.TenHuiVien}-{rowItem.MaHuiVien}",
                new Dictionary<string, object>()
                                                                       {
                        {"huiVienThamGiaId", rowItem.Id}
                                                                       },
                 new DialogOptions() { Width = "85%", Height = "80%", Resizable = true });
            }
            catch (Exception ex)
            {
                ShowErrorNotification(ex.GetError());
            }
        }
    }
    static string LayLoaiHui(int loaiHui)
    {
        if (loaiHui == (int)LoaiHui.NGAY)
        {
            return "Ngày";
        }

        if (loaiHui == (int)LoaiHui.TUAN)
        {
            return "Tuần";
        }

        if (loaiHui == (int)LoaiHui.THANG)
        {
            return "Tháng";
        }
        return string.Empty;
    }
    Task XuatPhieuGiao(HuiVienThamGiaDto rowItem)
    {
        isShowProgressBar = true;
        return Task.Run(async () =>
        {
            var huiVienThamGia = danhSachHuiVienThamGia.FirstOrDefault(hv => hv.MaHuiVien == rowItem.MaHuiVien);
            string fileName = $"PhieuGiao_{rowItem.TenHuiVien}_Day{dayHuiHienTai.TienMotChan}_Ngay{dayHuiHienTai.NgayTao.GetValueOrDefault().ToString("ddTMMyyyy")}_Ky{dayHuiHienTai.KyBo}.pdf";
            var phieuThuModel = new PhieuThuConfigModel();
            CultureInfo vnCulture = new CultureInfo("vi-VN");
            phieuThuModel.NgayMo = dayHuiHienTai.NgayKhui.GetValueOrDefault().ToString("D", vnCulture);
            phieuThuModel.DayHui = dayHuiHienTai.TienMotChan.GetValueOrDefault().ToString("C0", vnCulture);
            phieuThuModel.Khui = $"{LayLoaiHui(dayHuiHienTai.LoaiHui.GetValueOrDefault())} {phieuThuModel.DayHui}";
            phieuThuModel.SoPhan = dayHuiHienTai.TongSoChan.ToString();

            phieuThuModel.HuiVien = rowItem.TenHuiVien;
            phieuThuModel.NgayHot = huiVienThamGia.NgayBoHui.GetValueOrDefault().ToString("D", vnCulture);
            phieuThuModel.NgayGiao = DateTime.Now.ToString("D", vnCulture);
            phieuThuModel.ThamKeu = huiVienThamGia.SoTienBo.GetValueOrDefault().ToString("C0", vnCulture);
            phieuThuModel.SoKy = dayHuiHienTai.KyBo.ToString();
            int soChanC = danhSachHuiVienThamGia.Sum(hv => hv.SoCChet) - 1;
            float tongSoTienChanC = soChanC * dayHuiHienTai.TienMotChan.Value;
            phieuThuModel.Chet = $"Chết = {soChanC} x {phieuThuModel.DayHui} = {tongSoTienChanC.ToString("C0", vnCulture)}";

            int soChanS = danhSachHuiVienThamGia.Sum(hv => hv.SoCThamGia)-1 - soChanC ;
            float soTienChanSong =dayHuiHienTai.TienMotChan.GetValueOrDefault()-huiVienThamGia.SoTienBo.GetValueOrDefault();
            float tongSoTienChanSong = soChanS*soTienChanSong;
            phieuThuModel.Song = $"Sống = {soChanS} x {soTienChanSong.ToString("C0", vnCulture)} = {tongSoTienChanSong.ToString("C0", vnCulture)}";

            float tienHui = tongSoTienChanC + tongSoTienChanSong;
            phieuThuModel.TienHui = tienHui.ToString("C0", vnCulture);
            phieuThuModel.TruKhac = "0";
            phieuThuModel.TruThao = "0";
            if (soChanC == 0)
            {
                phieuThuModel.TruThao = dayHuiHienTai.TienThao.GetValueOrDefault().ToString("C0", vnCulture);
            }
            phieuThuModel.ConGiao = huiVienThamGia.PhaiTra.GetValueOrDefault().ToString("C0", vnCulture);
            phieuThuModel.SoPhanConLai = soChanS.ToString();

            var html = await RazorTemplateEngine.RenderPartialAsync("Views/PhieuThu.cshtml", phieuThuModel);

            HtmlToPdf converter = new HtmlToPdf();
            // set converter options
            converter.Options.PdfPageSize = PdfPageSize.A5;
            converter.Options.PdfPageOrientation = PdfPageOrientation.Portrait;
            converter.Options.DisplayHeader = true;
            converter.Options.DisplayFooter = true;
            converter.Options.MarginLeft = 30;
            converter.Options.MarginRight = 30;

            // convert the url to pdf
            PdfDocument doc = converter.ConvertHtmlString(html);
            dialogService.Close();
            using MemoryStream stream = new MemoryStream();
            // save pdf document
            doc.Save(stream);
            isShowProgressBar = false;
            var fileSaverResult = await FileSaver.Default.SaveAsync(fileName, stream);
            // close pdf document
            if (fileSaverResult.IsSuccessful)
            {
                doc.Close();
                ShowSuccessNotification($"Xuất file thành công!");
            }
            
        });
    }

    async Task ThaoTac(RadzenSplitButtonItem item, HuiVienThamGiaDto rowItem)
    {
        if (item != null && rowItem!=null)
        {
            switch (item.Value)
            {
                case "1":
                    await XoaHuiVienThamGia(rowItem);
                    break;
                case "2":
                    await DoiNguoiThamGia(rowItem);
                    break;
                case "3":
                    await XuatPhieuGiao(rowItem);
                    break;
                case "4":
                    await HienThiChiTietLichSuDongHui(rowItem);
                    break;
                default:
                    await ChinhSuaDong(rowItem);
                    break;
            }
        }
        else
        {
            if (rowItem != null)
            {
                await ChinhSuaDong(rowItem);
            }
        }
    }
    public void Dispose()
    {
        dialogService.OnOpen -= OnOpenDialog;
        dialogService.OnClose -= OnCloseDialog;
    }
}
